# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Elixir CI

on:
  push:
    # branches: ["main"]
  pull_request:
    # branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    name: NIF ${{ matrix.nif }} - ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        nif: ["2.16", "2.15"]
        job:
          # - {
          #     target: arm-unknown-linux-gnueabihf,
          #     os: ubuntu-20.04,
          #     use-cross: true,
          #   }
          # - { target: aarch64-unknown-linux-gnu   , os: ubuntu-20.04 , use-cross: true }
          # - { target: aarch64-unknown-linux-musl  , os: ubuntu-20.04 , use-cross: true }
          # - { target: aarch64-apple-darwin        , os: macos-12      }
          # - { target: riscv64gc-unknown-linux-gnu , os: ubuntu-20.04 , use-cross: true }
          # - { target: x86_64-apple-darwin         , os: macos-12      }
          - { target: x86_64-unknown-linux-gnu    , os: ubuntu-20.04  }
          # - { target: x86_64-unknown-linux-musl   , os: ubuntu-20.04 , use-cross: true }
          # - { target: x86_64-pc-windows-gnu       , os: windows-2019  }
          # - { target: x86_64-pc-windows-msvc      , os: windows-2019  }
    # set environment variables for all the steps below
    env:
      MIX_ENV: "test"
      RISC0_DEV_MODE: true # use risc0 debug proving

    steps:
      # checkout the repo
      - uses: actions/checkout@v4
        with:
          submodules: "true"

      # installl the rust toolchain (this was not necessary,
      # but some sporadic issues happened where the installation failed)
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}

      - name: set up Elixir
        uses: erlef/setup-beam@v1
        with:
          version-type: "strict"
          version-file: ".tool-versions"

      - name: Extract project version
        shell: bash
        run: |
          # Get the project version from mix.exs
          echo "PROJECT_VERSION=$(sed -n 's/^  @version "\(.*\)"/\1/p' mix.exs | head -n1)" >> $GITHUB_ENV

      - name: Build the project
        id: build-crate
        uses: philss/rustler-precompiled-action@v1.0.1
        with:
          project-name: niffy
          project-version: ${{ env.PROJECT_VERSION }}
          target: ${{ matrix.job.target }}
          nif-version: ${{ matrix.nif }}
          use-cross: ${{ matrix.job.use-cross }}
          project-dir: "native/example"

      - name: Artifact upload
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build-crate.outputs.file-name }}
          path: ${{ steps.build-crate.outputs.file-path }}
      # #----------------------------------------------------------------------------
      # # Restore the cache.
      # #
      # # Note that this includes the Rust output because otherwise the action
      # # takes +- 60 minutes.

      # - name: restore dependencies cache
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       bindings/target
      #     key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}-${{ hashFiles('**/Cargo.lock') }}
      #     restore-keys: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}-${{ hashFiles('**/Cargo.lock') }}

      # #----------------------------------------------------------------------------
      # # Fetch and compile dependencies

      # - name: install dependencies
      #   run: mix deps.get

      # - name: compile deps
      #   run: mix deps.compile

      # - name: compile deps (dev)
      #   env:
      #     MIX_ENV: "dev"
      #   run: mix deps.compile

      # #----------------------------------------------------------------------------
      # # Lint

      # - name: compile sdk
      #   run: mix compile --warnings-as-errors

      # - name: check formatting
      #   run: mix format --check-formatted

      # - name: check formatting
      #   run: mix dialyzer

      # - name: check dependencies
      #   run: mix deps.unlock --check-unused

      # - name: credo
      #   run: mix credo --strict

      # #----------------------------------------------------------------------------
      # # Run the tests

      # - name: run tests
      #   run: mix test
